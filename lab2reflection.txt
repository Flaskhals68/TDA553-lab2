1.

The contract for gas()
If the car is allowed to move, increase the current speed of said car. The method only accepts positive doubles in the 
range 0 <= x <= 1.

The implementations of gas() in both volvo and scania both follow the contract. The behaviours of the two implementations are slightly different, 
giving different speeds and having different conditions. Currently the car has no conditions which would stop it from moving, 
while the scania cannot move if its bed is raised. 

The contract for brake()
Lower the car's speed according to a paramether. The speed can not go below 0, nor can a negative value be used to increase the speed.
The method only accepts values in the range 0 <= x <= 1.

All cars use the break method in the same way and all follow the contract to the fullest. Should a value outside said range,
an exception will be thrown.

Because the contract is formulated that the cars should move only if they are allowed to, the Liskov Principle is followed even though we might get a different
outcome when switching a Volvo for a Scania (the Scania might stay put if the bed is raised).

2. 
For the duplication between the Scania and the Car Transporter we created a superclass BaseBed, which holds a method for checking if a bed is allowed to move
and also the two abstract methods raise and lower. We created an interface HasBed for the sake of subtype polymorphism.

To avoid code duplication for the transport and repair shop we chose do delegate the load and unload functionality to a CarStorage object.
Both classes also implemnt the interface HasCarStorage to allow subtype polymorphism. 


3. 


